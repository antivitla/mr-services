/**
 *	Главный модуль приложения Камбатрон (странное название, да)
 */
;(function () {
	"use strict";
	angular.module("Cambatron", ["WorkTimeTrackerModule", "ngMaterial"]);
}());
/**
 *	Модуль учета рабочего времени
 */
;(function () {
	"use strict";
	angular.module("WorkTimeTrackerModule", ["Cambatron.utils"])
		.constant("WTTStorageUri", "https://brilliant-fire-1299.firebaseio.com/cambatron");
}());
/**
 *	Модуль с утилитами
 */
;(function () {
	"use strict";
	angular.module("Cambatron.utils", []);
}());

// angular.module("Cambatron")
// 	// Получить новую дату, установленную в начало календарного периода,
// 	// к которому принадлежит исходная дата. Период может быть день/неделя/месяц/год.
// 	// Например имеем момент времени 2 июля 15:06 (чт), хотим получить начало недели,
// 	// на котором случился этот момент. Получаем 29 июня 00:00 (пн). Если месяц,
// 	// получаем 1 июля 00:00. Если год, то 1 янв 00:00, и т.д.
// 	.filter("periodstart", function () {
// 		return function (date, period) {
// 			var d = (new Date(date));
// 			if (period == "day") {
// 				d.setHours(0,0,0,0);
// 			} else if (period == "week") {
// 				d.setDate(d.getDate() - d.getDay() + 1);
// 				d.setHours(0,0,0,0);
// 			} else if (period == "month") {
// 				d.setDate(1);
// 				d.setHours(0,0,0,0);
// 			} else if (period == "year") {
// 				d.setMonth(0, 1);
// 				d.setHours(0,0,0,0);
// 			};
// 			return d;
// 		}
// 	})
// 	// Преобразовать объект в массив свойств. ВНИМАНИЕ, ключи свойств при этом теряются!
// 	.filter("toArray", function () {
// 		return function (obj) {
// 			var arr;
// 			if (Array.isArray(obj)) {
// 				arr = obj.slice(0);
// 			}
// 			else {
// 				arr = [];
// 				for (var i in obj) {
// 					if (obj.hasOwnProperty(i)) {
// 						arr.push(obj[i]);
// 					}
// 				}
// 			}
// 			return arr;
// 		}
// 	});

// // @http://stackoverflow.com/questions/4288759/asynchronous-for-cycle-in-javascript
// window.asyncLoop = function(o) {
//     var i=-1;

//     var loop = function(){
//         i++;
//         if(i==o.length){o.callback(); return;}
//         o.functionToLoop(loop, i);
//     }

//     loop();
// };
'use strict';
angular.module("ngLocale", [], ["$provide", function($provide) {
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
function getDecimals(n) {
  n = n + '';
  var i = n.indexOf('.');
  return (i == -1) ? 0 : n.length - i - 1;
}

function getVF(n, opt_precision) {
  var v = opt_precision;

  if (undefined === v) {
    v = Math.min(getDecimals(n), 3);
  }

  var base = Math.pow(10, v);
  var f = ((n * base) | 0) % base;
  return {v: v, f: f};
}

$provide.value("$locale", {
  "DATETIME_FORMATS": {
    "AMPMS": [
      "AM",
      "PM"
    ],
    "DAY": [
      "\u0432\u043e\u0441\u043a\u0440\u0435\u0441\u0435\u043d\u044c\u0435",
      "\u043f\u043e\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u0438\u043a",
      "\u0432\u0442\u043e\u0440\u043d\u0438\u043a",
      "\u0441\u0440\u0435\u0434\u0430",
      "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
      "\u043f\u044f\u0442\u043d\u0438\u0446\u0430",
      "\u0441\u0443\u0431\u0431\u043e\u0442\u0430"
    ],
    "ERANAMES": [
      "\u0434\u043e \u043d. \u044d.",
      "\u043d. \u044d."
    ],
    "ERAS": [
      "\u0434\u043e \u043d. \u044d.",
      "\u043d. \u044d."
    ],
    "FIRSTDAYOFWEEK": 0,
    "MONTH": [
      "\u044f\u043d\u0432\u0430\u0440\u044f",
      "\u0444\u0435\u0432\u0440\u0430\u043b\u044f",
      "\u043c\u0430\u0440\u0442\u0430",
      "\u0430\u043f\u0440\u0435\u043b\u044f",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d\u044f",
      "\u0438\u044e\u043b\u044f",
      "\u0430\u0432\u0433\u0443\u0441\u0442\u0430",
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044f",
      "\u043e\u043a\u0442\u044f\u0431\u0440\u044f",
      "\u043d\u043e\u044f\u0431\u0440\u044f",
      "\u0434\u0435\u043a\u0430\u0431\u0440\u044f"
    ],
    "SHORTDAY": [
      "\u0432\u0441",
      "\u043f\u043d",
      "\u0432\u0442",
      "\u0441\u0440",
      "\u0447\u0442",
      "\u043f\u0442",
      "\u0441\u0431"
    ],
    "SHORTMONTH": [
      "\u044f\u043d\u0432.",
      "\u0444\u0435\u0432\u0440.",
      "\u043c\u0430\u0440\u0442\u0430",
      "\u0430\u043f\u0440.",
      "\u043c\u0430\u044f",
      "\u0438\u044e\u043d\u044f",
      "\u0438\u044e\u043b\u044f",
      "\u0430\u0432\u0433.",
      "\u0441\u0435\u043d\u0442.",
      "\u043e\u043a\u0442.",
      "\u043d\u043e\u044f\u0431.",
      "\u0434\u0435\u043a."
    ],
    "WEEKENDRANGE": [
      5,
      6
    ],
    "fullDate": "EEEE, d MMMM y '\u0433'.",
    "longDate": "d MMMM y '\u0433'.",
    "medium": "d MMM y '\u0433'. H:mm:ss",
    "mediumDate": "d MMM y '\u0433'.",
    "mediumTime": "H:mm:ss",
    "short": "dd.MM.yy H:mm",
    "shortDate": "dd.MM.yy",
    "shortTime": "H:mm"
  },
  "NUMBER_FORMATS": {
    "CURRENCY_SYM": "\u0440\u0443\u0431.",
    "DECIMAL_SEP": ",",
    "GROUP_SEP": "\u00a0",
    "PATTERNS": [
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 3,
        "minFrac": 0,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "",
        "posPre": "",
        "posSuf": ""
      },
      {
        "gSize": 3,
        "lgSize": 3,
        "maxFrac": 2,
        "minFrac": 2,
        "minInt": 1,
        "negPre": "-",
        "negSuf": "\u00a0\u00a4",
        "posPre": "",
        "posSuf": "\u00a0\u00a4"
      }
    ]
  },
  "id": "ru-ru",
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (vf.v == 0 && i % 10 == 1 && i % 100 != 11) {    return PLURAL_CATEGORY.ONE;  }  if (vf.v == 0 && i % 10 >= 2 && i % 10 <= 4 && (i % 100 < 12 || i % 100 > 14)) {    return PLURAL_CATEGORY.FEW;  }  if (vf.v == 0 && i % 10 == 0 || vf.v == 0 && i % 10 >= 5 && i % 10 <= 9 || vf.v == 0 && i % 100 >= 11 && i % 100 <= 14) {    return PLURAL_CATEGORY.MANY;  }  return PLURAL_CATEGORY.OTHER;}
});
}]);

/**
 *	Директива робота (с кнопками)
 */
;(function (){
	"use strict";
	angular.module("WorkTimeTrackerModule")
		.directive("wttBook", wttBookDirective);

	function wttBookDirective() {
		return {
			controllerAs: "book",
			controller: wttBookController
		};
	}

	wttBookController.$inject = ["WorkTimeTrackerBookReporter"];

	function wttBookController (WorkTimeTrackerBookReporter) {
		this.entries = WorkTimeTrackerBookReporter.list({
			direction: -1
		});
	}

}());
/**
 *	Книга учета рабочего времени
 */
;(function () {
	"use strict";
	angular.module("WorkTimeTrackerModule")
		.factory("WorkTimeTrackerBook", WorkTimeTrackerBook);

	WorkTimeTrackerBook.$inject = ["$window", "WTTStorageUri"];

	function WorkTimeTrackerBook ($window, WTTStorageUri) {
		return new $window.Firebase(WTTStorageUri + "/wtt-book");
	}

}());

/**
 *	Репортёр..
 */
;(function () {
	"use strict";
	angular.module("WorkTimeTrackerModule")
		.factory("WorkTimeTrackerBookEntry", WorkTimeTrackerBookEntry);

	WorkTimeTrackerBookEntry.$inject = ["evalAsync"];

	function WorkTimeTrackerBookEntry (evalAsync) {

		function Item(snapshot) {
			Object.defineProperties(this, {
				"start":  {
					enumerable: true,
					get: function () { return this.item.val().start; },
					set: function (value) {	this.item.ref().update({ start: value }); }
				},
				"stop": {
					enumerable: true,
					get: function () { return this.item.val().stop; },
					set: function (value) { this.item.ref().update({ stop: value }); }
				},
				"description": {
					enumerable: true,
					get: function () { return this.item.val().description; },
					set: function (value) { this.item.ref().update({ description: value }); }
				}
			});

			initItem.call(this, snapshot);
		}

		Item.prototype.remove = removeItem;

		return {
			create: function (snapshot) { return new Item(snapshot); }
		};

		function initItem (snapshot) {
			Object.defineProperties(this, {
				"item": {
					writable: true,
					enumerable: false,
					configurable: false,
					value: snapshot
				}
			})

			// Подпишемся на изменения
			var onvalue = this.item.ref().on("value", evalAsync(function (snapshot) {
				if (!snapshot.val()) {
					// Если итем удален из хранилища, нужно как-то отреагировать
					// (прекращаем получать данные, но оставляем итем в памяти)
					this.destroy();
				} else {
					this.item = snapshot;
				}
			}.bind(this)));

			// Подчистка за собой
			this.destroy = function () {
				this.item.ref().off("value", onvalue);
			}
		}

		function removeItem () {
			this.destroy();
			this.item.ref().remove();
		}

	}

}());
/**
 *	Репортёр..
 */
;(function () {
	"use strict";
	angular.module("WorkTimeTrackerModule")
		.factory("WorkTimeTrackerBookReporter", WorkTimeTrackerBookReporter);

	WorkTimeTrackerBookReporter.$inject = ["WorkTimeTrackerBook", "WorkTimeTrackerBookEntry", "evalAsync"];

	function WorkTimeTrackerBookReporter (WorkTimeTrackerBook, WorkTimeTrackerBookEntry, evalAsync) {

		/**	Наш репортер
		 *	@param {number} options.direction Направление сортировки
		 *	@param {function} options.getKey М-м-м.. Функция доступа к значению, по которому сортирован массив записей (обычно по отметке о времени старта). Она будет использоваться для сортировки инструментарием SortedArray */
		function List (options, bookRef) {
			// Исходный массив, наша цель и результат, который видит юзер.
			this.list = [];
			// (Подрубим нужные события и прочие настройки)
			initList.call(this, options, bookRef);
			// Внимание, возвращаем сам исходный массив а не новый объект List.
			// Через замыкания мы сможем работать с ним внутри и это будет
			// мгновенно доступно извне, но при этом нельзя будет удалить сам массив
			// извне. Псевдо-readonly такой массив. Секретная обертка вокруг него.
			return this.list;
		}

		// Возвращаем фабрику списков
		return {
			list: function (options) { return new List(options, WorkTimeTrackerBook); }
		};

		function initList (options, bookRef) {
			// Это наша рабочая лошадка - функционал внутри <SortedArray> vector изменяет
			// массив который передали в конструкторе.
			this.vector = new SortedArray(this.list, angular.extend({}, { getKey: function (value) { return value.start; } }, options));
			// Массив быстрого доступа для приходящих апдейтов
			this.keyObj = {};
			// Внимание, хитрый вызов обработчика. Обертка evalAsync
			// возвращает функцию которая внутренне вызовет child_added функцию
			// внутри как-то так $rootScope.$evalAsync(myFunction.call(this, args)).
			// Плюс сразу привязали контекст.
			// Это чтобы апдейты DOM ангуляра правильно отреагировали на наши изменения,
			// ведь они происходят асинхронно и "на стороне" (от firebase бэкенда).
			var onadd = bookRef.on("child_added", evalAsync(child_added.bind(this))),
				onremove = bookRef.on("child_removed", evalAsync(child_removed.bind(this)));
			// ref.on("child_changed", evalAsync(child_changed.bind(this)));

			// Подчистка за собой
			this.destroy = function () {
				bookRef.off("child_added", onadd);
				bookRef.off("child_removed", onremove);
			}
		}

		function child_added(snapshot) {
			var item = WorkTimeTrackerBookEntry.create(snapshot);
			this.vector.insert(item);
			this.keyObj[snapshot.key()] = item;
		}

		function child_removed(snapshot) {
			if (!this.keyObj[snapshot.key()]) {
				var error = new Error("Не найдено такого элемента");
				console.warn(error.stack);
			} else {
				this.list.splice(this.list.indexOf(this.keyObj[snapshot.key()]), 1)
				this.keyObj[snapshot.key()].destroy();
				delete this.keyObj[snapshot.key()];
			}
		}
	}

}());
/**
 *  Импортируемые данных из старых таймеров
 */
var acts = {
    "1": {
        "start": 1435582371273,
        "stop": 1435583330175,
        "id": "1",
        "taskid": "1"
    },
    "2": {
        "start": 1435582011245,
        "stop": 1435582356913,
        "id": "2",
        "taskid": "2"
    },
    "3": {
        "start": 1435574147096,
        "stop": 1435581819176,
        "id": "3",
        "taskid": "3"
    },
    "4": {
        "start": 1435573498946,
        "stop": 1435574133186,
        "id": "4",
        "taskid": "4"
    },
    "5": {
        "start": 1435573436232,
        "stop": 1435573483176,
        "id": "5",
        "taskid": "5"
    },
    "6": {
        "start": 1435573389139,
        "stop": 1435573389141,
        "id": "6",
        "taskid": "6"
    },
    "8": {
        "start": 1430829163929,
        "stop": 1430834245717,
        "id": "8",
        "taskid": "7"
    },
    "9": {
        "start": 1430805950641,
        "stop": 1430815052732,
        "id": "9",
        "taskid": "7"
    },
    "10": {
        "start": 1430544274144,
        "stop": 1430569503013,
        "id": "10",
        "taskid": "7"
    },
    "11": {
        "start": 1435742610132,
        "stop": 1435742620132,
        "id": "11",
        "taskid": "7"
    },
    "12": {
        "start": 1430286560523,
        "stop": 1430305760523,
        "id": "12",
        "taskid": "7"
    },
    "13": {
        "start": 1430225053727,
        "stop": 1430227223010,
        "id": "13",
        "taskid": "7"
    },
    "14": {
        "start": 1430207665500,
        "stop": 1430220145500,
        "id": "14",
        "taskid": "7"
    },
    "15": {
        "start": 1430111037236,
        "stop": 1430141517236,
        "id": "15",
        "taskid": "7"
    },
    "16": {
        "start": 1429863129219,
        "stop": 1429867748567,
        "id": "16",
        "taskid": "7"
    },
    "17": {
        "start": 1428986743466,
        "stop": 1428994187997,
        "id": "17",
        "taskid": "8"
    },
    "18": {
        "start": 1428576373384,
        "stop": 1428581050488,
        "id": "18",
        "taskid": "8"
    },
    "19": {
        "start": 1428493973320,
        "stop": 1428500621005,
        "id": "19",
        "taskid": "8"
    },
    "20": {
        "start": 1428476873628,
        "stop": 1428489989001,
        "id": "20",
        "taskid": "8"
    },
    "21": {
        "start": 1428042735335,
        "stop": 1428056472003,
        "id": "21",
        "taskid": "8"
    },
    "22": {
        "start": 1427959295680,
        "stop": 1427959809002,
        "id": "22",
        "taskid": "9"
    },
    "23": {
        "start": 1427869672964,
        "stop": 1427886840006,
        "id": "23",
        "taskid": "7"
    },
    "24": {
        "start": 1435656454132,
        "stop":  1435656454332,
        "id": "24",
        "taskid": "10"
    },
    "25": {
        "start": 1435656283332,
        "stop": 1435656293332,
        "id": "25",
        "taskid": "10"
    },
    "26": {
        "start": 1435656393332,
        "stop": 1435656423332,
        "id": "26",
        "taskid": "10"
    },
    "27": {
        "start": 1427774448130,
        "stop": 1427780635005,
        "id": "27",
        "taskid": "8"
    },
    "28": {
        "start": 1427457169961,
        "stop": 1427482969961,
        "id": "28",
        "taskid": "7"
    },
    "29": {
        "start": 1427431360634,
        "stop": 1427441864763,
        "id": "29",
        "taskid": "8"
    },
    "30": {
        "start": 1427387548584,
        "stop": 1427391803762,
        "id": "30",
        "taskid": "8"
    },
    "31": {
        "start": 1427386517436,
        "stop": 1427387530763,
        "id": "31",
        "taskid": "8"
    },
    "32": {
        "start": 1427381411779,
        "stop": 1427383983788,
        "id": "32",
        "taskid": "9"
    },
    "33": {
        "start": 1427354262090,
        "stop": 1427355159762,
        "id": "33",
        "taskid": "11"
    },
    "34": {
        "start": 1427350593290,
        "stop": 1427353853760,
        "id": "34",
        "taskid": "12"
    },
    "35": {
        "start": 1427279715749,
        "stop": 1427281010769,
        "id": "35",
        "taskid": "8"
    },
    "36": {
        "start": 1427275884318,
        "stop": 1427279004794,
        "id": "36",
        "taskid": "9"
    },
    "37": {
        "start": 1427172333099,
        "stop": 1427190144760,
        "id": "37",
        "taskid": "7"
    },
    "38": {
        "start": 1427114068702,
        "stop": 1427123090761,
        "id": "38",
        "taskid": "8"
    },
    "39": {
        "start": 1427096447264,
        "stop": 1427096911762,
        "id": "39",
        "taskid": "8"
    },
    "40": {
        "start": 1427086891032,
        "stop": 1427091745576,
        "id": "40",
        "taskid": "8"
    },
    "41": {
        "start": 1426859645062,
        "stop": 1426862973761,
        "id": "41",
        "taskid": "13"
    },
    "42": {
        "start": 1426859431537,
        "stop": 1426859632761,
        "id": "42",
        "taskid": "8"
    },
    "43": {
        "start": 1426849513486,
        "stop": 1426857585761,
        "id": "43",
        "taskid": "7"
    },
    "44": {
        "start": 1426837774132,
        "stop": 1426839888761,
        "id": "44",
        "taskid": "8"
    },
    "45": {
        "start": 1426835790650,
        "stop": 1426836413097,
        "id": "45",
        "taskid": "8"
    },
    "46": {
        "start": 1426751662214,
        "stop": 1426773876138,
        "id": "46",
        "taskid": "8"
    },
    "47": {
        "start": 1426683321549,
        "stop": 1426709162151,
        "id": "47",
        "taskid": "7"
    },
    "48": {
        "start": 1426657120075,
        "stop": 1426663881150,
        "id": "48",
        "taskid": "7"
    },
    "49": {
        "start": 1426588037418,
        "stop": 1426591791139,
        "id": "49",
        "taskid": "8"
    },
    "50": {
        "start": 1426587830133,
        "stop": 1426587889139,
        "id": "50",
        "taskid": "8"
    },
    "51": {
        "start": 1426587828109,
        "stop": 1426587828111,
        "id": "51",
        "taskid": "13"
    },
    "52": {
        "start": 1426572445763,
        "stop": 1426574679139,
        "id": "52",
        "taskid": "13"
    },
    "53": {
        "start": 1426507025612,
        "stop": 1426518975139,
        "id": "53",
        "taskid": "8"
    },
    "54": {
        "start": 1426502391407,
        "stop": 1426504991140,
        "id": "54",
        "taskid": "8"
    },
    "55": {
        "start": 1426499135068,
        "stop": 1426500727138,
        "id": "55",
        "taskid": "9"
    },
    "56": {
        "start": 1426484338620,
        "stop": 1426490234138,
        "id": "56",
        "taskid": "9"
    },
    "57": {
        "start": 1426482996941,
        "stop": 1426484203141,
        "id": "57",
        "taskid": "8"
    },
    "58": {
        "start": 1426244360901,
        "stop": 1426255934171,
        "id": "58",
        "taskid": "8"
    },
    "59": {
        "start": 1426236244732,
        "stop": 1426238044732,
        "id": "59",
        "taskid": "10"
    },
    "60": {
        "start": 1426227203489,
        "stop": 1426234821139,
        "id": "60",
        "taskid": "8"
    },
    "61": {
        "start": 1426164111943,
        "stop": 1426186911943,
        "id": "61",
        "taskid": "8"
    },
    "62": {
        "start": 1426158207640,
        "stop": 1426163386140,
        "id": "62",
        "taskid": "8"
    },
    "63": {
        "start": 1426151130164,
        "stop": 1426151146139,
        "id": "63",
        "taskid": "8"
    },
    "64": {
        "start": 1426151098237,
        "stop": 1426151102138,
        "id": "64",
        "taskid": "8"
    },
    "65": {
        "start": 1426142817417,
        "stop": 1426151086164,
        "id": "65",
        "taskid": "8"
    },
    "66": {
        "start": 1426084749180,
        "stop": 1426087708946,
        "id": "66",
        "taskid": "8"
    },
    "67": {
        "start": 1426072113882,
        "stop": 1426082466946,
        "id": "67",
        "taskid": "8"
    },
    "68": {
        "start": 1426063134526,
        "stop": 1426068815947,
        "id": "68",
        "taskid": "8"
    },
    "69": {
        "start": 1426058038644,
        "stop": 1426062403946,
        "id": "69",
        "taskid": "8"
    },
    "70": {
        "start": 1425994307744,
        "stop": 1425999707744,
        "id": "70",
        "taskid": "8"
    },
    "71": {
        "start": 1425982553119,
        "stop": 1425990353119,
        "id": "71",
        "taskid": "8"
    },
    "72": {
        "start": 1425980494806,
        "stop": 1425981960948,
        "id": "72",
        "taskid": "8"
    },
    "73": {
        "start": 1425969717071,
        "stop": 1425978974947,
        "id": "73",
        "taskid": "8"
    },
    "74": {
        "start": 1425897001021,
        "stop": 1425900130957,
        "id": "74",
        "taskid": "8"
    },
    "75": {
        "start": 1425885462002,
        "stop": 1425892532956,
        "id": "75",
        "taskid": "8"
    },
    "76": {
        "start": 1425657627830,
        "stop": 1425661047830,
        "id": "76",
        "taskid": "8"
    },
    "77": {
        "start": 1425647424617,
        "stop": 1425649824617,
        "id": "77",
        "taskid": "8"
    },
    "78": {
        "start": 1425632796967,
        "stop": 1425638958977,
        "id": "78",
        "taskid": "8"
    },
    "79": {
        "start": 1425622500883,
        "stop": 1425623831978,
        "id": "79",
        "taskid": "10"
    },
    "80": {
        "start": 1425573279186,
        "stop": 1425584079186,
        "id": "80",
        "taskid": "8"
    },
    "81": {
        "start": 1425551431845,
        "stop": 1425556891845,
        "id": "81",
        "taskid": "8"
    },
    "82": {
        "start": 1425543646396,
        "stop": 1425547616980,
        "id": "82",
        "taskid": "8"
    },
    "83": {
        "start": 1425489831249,
        "stop": 1425497173977,
        "id": "83",
        "taskid": "8"
    },
    "84": {
        "start": 1425485406368,
        "stop": 1425488709981,
        "id": "84",
        "taskid": "8"
    },
    "85": {
        "start": 1425458208350,
        "stop": 1425470341978,
        "id": "85",
        "taskid": "8"
    },
    "86": {
        "start": 1425458200110,
        "stop": 1425461800110,
        "id": "86",
        "taskid": "8"
    },
    "87": {
        "start": 1425386817040,
        "stop": 1425389217040,
        "id": "87",
        "taskid": "8"
    },
    "88": {
        "start": 1425384379546,
        "stop": 1425389779546,
        "id": "88",
        "taskid": "8"
    },
    "89": {
        "start": 1425366378888,
        "stop": 1425377178888,
        "id": "89",
        "taskid": "8"
    },
    "90": {
        "start": 1425189941738,
        "stop": 1425200741738,
        "id": "90",
        "taskid": "8"
    },
    "91": {
        "start": 1425019712306,
        "stop": 1425019712306,
        "id": "91",
        "taskid": "10"
    },
    "92": {
        "start": 1425019692491,
        "stop": 1425019692493,
        "id": "92",
        "taskid": "8"
    },
    "93": {
        "start": 1423246278444,
        "stop": 1423269427994,
        "id": "93",
        "taskid": "14"
    },
    "94": {
        "start": 1423051808266,
        "stop": 1423056146010,
        "id": "94",
        "taskid": "9"
    },
    "95": {
        "start": 1423048273701,
        "stop": 1423051564012,
        "id": "95",
        "taskid": "9"
    },
    "96": {
        "start": 1423023700025,
        "stop": 1423030900025,
        "id": "96",
        "taskid": "14"
    },
    "97": {
        "start": 1422921627597,
        "stop": 1422925745012,
        "id": "97",
        "taskid": "14"
    },
    "98": {
        "start": 1422917081106,
        "stop": 1422920819011,
        "id": "98",
        "taskid": "14"
    },
    "99": {
        "start": 1422871894538,
        "stop": 1422877785014,
        "id": "99",
        "taskid": "14"
    },
    "100": {
        "start": 1422464578944,
        "stop": 1422486066603,
        "id": "100",
        "taskid": "14"
    },
    "101": {
        "start": 1422382645248,
        "stop": 1422398002603,
        "id": "101",
        "taskid": "14"
    },
    "102": {
        "start": 1422291782973,
        "stop": 1422302875687,
        "id": "102",
        "taskid": "15"
    },
    "103": {
        "start": 1422274115184,
        "stop": 1422289999687,
        "id": "103",
        "taskid": "15"
    },
    "104": {
        "start": 1422271992788,
        "stop": 1422273668685,
        "id": "104",
        "taskid": "15"
    },
    "105": {
        "start": 1422259311552,
        "stop": 1422266565685,
        "id": "105",
        "taskid": "15"
    },
    "106": {
        "start": 1421666639828,
        "stop": 1421670980842,
        "id": "106",
        "taskid": "14"
    },
    "107": {
        "start": 1421663953465,
        "stop": 1421665541779,
        "id": "107",
        "taskid": "14"
    },
    "108": {
        "start": 1421663781298,
        "stop": 1421666181298,
        "id": "108",
        "taskid": "14"
    },
    "109": {
        "start": 1419424274312,
        "stop": 1419428732280,
        "id": "109",
        "taskid": "9"
    },
    "110": {
        "start": 1419420676930,
        "stop": 1419422864487,
        "id": "110",
        "taskid": "9"
    },
    "111": {
        "start": 1419409688404,
        "stop": 1419416888404,
        "id": "111",
        "taskid": "9"
    },
    "112": {
        "start": 1413815307868,
        "stop": 1413818907868,
        "id": "112",
        "taskid": "16"
    },
    "113": {
        "start": 1413785860455,
        "stop": 1413789460455,
        "id": "113",
        "taskid": "16"
    },
    "114": {
        "start": 1435744632894,
        "stop": 1435744652894,
        "id": "114",
        "taskid": "11"
    },
    "115": {
        "start": 1435744612894,
        "stop": 1435744622894,
        "id": "115",
        "taskid": "16"
    },
    "116": {
        "start": 1413453608479,
        "stop": 1413454023681,
        "id": "116",
        "taskid": "16"
    }
};

var tasks = {
    "1": {
        "id": "1",
        "acts": ["1"],
        "name": "отдаем результат",
        "parentid": "18"
    },
    "2": {
        "id": "2",
        "acts": ["2"],
        "name": "перерыв 1",
        "parentid": "18"
    },
    "3": {
        "id": "3",
        "acts": ["3"],
        "name": "верстаем",
        "parentid": "18"
    },
    "4": {
        "id": "4",
        "acts": ["4"],
        "name": "подготовка",
        "parentid": "18"
    },
    "5": {
        "id": "5",
        "acts": ["5"],
        "name": "думаем",
        "parentid": "18"
    },
    "6": {
        "id": "6",
        "acts": ["6"],
        "parentid": "17",
        "name": "Wifi-страница для Техносилы"
    },
    "7": {
        "id": "7",
        "acts": ["8", "9", "10", "11", "12", "13", "14", "15", "16", "23", "28", "37", "43", "47", "48"],
        "parentid": "20",
        "name": "Админка",
    },
    "8": {
        "id": "8",
        "acts": ["17", "18", "19", "20", "21", "27", "29", "30", "31", "35", "38", "39", "40", "42", "44", "45", "46", "49", "50", "53", "54", "57", "58", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "92"],
        "parentid": "21",
        "name": "Idealmaster"
    },
    "9": {
        "id": "9",
        "acts": ["22", "32", "36", "55", "56", "94", "95", "109", "110", "111"],
        "parentid": "21",
        "name": "neq4"
    },
    "10": {
        "id": "10",
        "acts": ["24", "25", "26", "59", "79", "91"],
        "parentid": "21",
        "name": "Ahmad"
    },
    "11": {
        "id": "11",
        "acts": ["33", "114"],
        "parentid": "21",
        "name": "Кофемания FM"
    },
    "12": {
        "id": "12",
        "acts": ["34"],
        "parentid": "21",
        "name": "Цветочная лавка"
    },
    "13": {
        "id": "13",
        "acts": ["41", "51", "52"],
        "parentid": "22",
        "name": "Подписка"
    },
    "14": {
        "id": "14",
        "acts": ["93", "96", "97", "98", "99", "100", "101", "106", "107", "108"],
        "parentid": "19",
        "name": "Medoscope"
    },
    "15": {
        "id": "15",
        "acts": ["102", "103", "104", "105"],
        "parentid": "21",
        "name": "Космос"
    },
    "16": {
        "id": "16",
        "acts": ["112", "113", "115", "116"],
        "parentid": "21",
        "name": "Сheapside"
    },
    "17": {
        "id": "17",
        "name": "Евгений Гребёнкин",
        "childrenid": ["6","18"]
    },
    "18": {
        "id": "18",
        "name": "Wifi-страница для Техносилы",
        "childrenid": ["1", "2", "3", "4", "5"],
        "parentid": "17"
    },
    "19": {
        "id": "19",
        "name": "Петров",
        "childrenid": ["20", "14"]
    },
    "20": {
        "id": "20",
        "name": "Medoscope",
        "childrenid": ["7"],
        "parentid": "19"
    },
    "21": {
        "id": "21",
        "name": "Маша Нигголь",
        "childrenid": ["8", "9", "10", "11", "12", "15", "16"]
    },
    "22": {
        "id": "22",
        "name": "Андрей Чиж",
        "childrenid": ["13"]
    }


};

var tasktree = {
    "Евгений Гребёнкин": {
        "type": "group",
        "name": "Евгений Гребёнкин",
        "tasks": {
            "Wifi-страница для Техносилы": {
                "type": "group",
                "name": "Wifi-страница для Техносилы",
                "tasks": {
                    "отдаем результат": {
                        "type": "task",
                        "name": "отдаем результат",
                        "taskid": "1"
                    },
                    "перерыв 1": {
                        "type": "task",
                        "name": "перерыв 1",
                        "taskid": "2"
                    },
                    "верстаем": {
                        "type": "task",
                        "name": "верстаем",
                        "taskid": "3"
                    },
                    "подготовка": {
                        "type": "task",
                        "name": "подготовка",
                        "taskid": "4"
                    },
                    "думаем": {
                        "type": "task",
                        "name": "думаем",
                        "taskid": "5"
                    }
                }
            }
        }
    },
    "Петров": {
        "type": "group",
        "name": "Петров",
        "tasks": {
            "Medoscope": {
                "type": "group",
                "name": "Medoscope",
                "tasks": {
                    "Админка": {
                        "type": "task",
                        "name": "Админка",
                        "taskid": "7"
                    }
                }
            }
        }
    },
    "Маша Нигголь": {
        "type": "group",
        "name": "Маша Нигголь",
        "tasks": {
            "Idealmaster": {
                "type": "task",
                "name": "Idealmaster",
                "taskid": "8"
            },
            "neq4": {
                "type": "task",
                "name": "neq4",
                "taskid": "9"
            },
            "Ahmad": {
                "type": "task",
                "name": "Ahmad",
                "taskid": "10"
            },
            "Кофемания FM": {
                "type": "task",
                "name": "Кофемания FM",
                "taskid": "11"
            },
            "Цветочная лавка": {
                "type": "task",
                "name": "Цветочная лавка",
                "taskid": "12"
            },
            "Космос": {
                "type": "task",
                "name": "Космос",
                "taskid": "15"
            },
            "Сheapside": {
                "type": "task",
                "name": "Сheapside",
                "taskid": "16"
            }
        }
    },
    "Андрей Чиж": {
        "type": "group",
        "name": "Андрей Чиж",
        "tasks": {
            "Подписка": {
                "type": "task",
                "name": "Подписка",
                "taskid": "13"
            }
        }
    }
};

angular.module("Cambatron")
	.value("acts", acts)
	.value("tasks", tasks);
/**
 *	Директива робота (с кнопками)
 */
;(function (){
	"use strict";
	angular.module("WorkTimeTrackerModule")
		.directive("wttRobot", wttRobotDirective);

	function wttRobotDirective() {
		return {
			controllerAs: "robot",
			controller: ["WorkTimeTrackerRobot", function (WorkTimeTrackerRobot) {
				this.start = function () {
					WorkTimeTrackerRobot.start();
				};
				this.stop = function () {
					WorkTimeTrackerRobot.stop();
				};
				this.status = function () {
					return WorkTimeTrackerRobot.status;
				};
				this.entry = function () {
					return WorkTimeTrackerRobot.entry;
				};
			}]
		};
	}

}());
/**
 *	Робот учета рабочего времени. Умеет стартовать и останавливаться с опциональными
 *	значениями времени старта и окончания (которые заносятся в книгу учета раб.времени)
 */
;(function (){
	"use strict";
	angular.module("WorkTimeTrackerModule")
		.factory("WorkTimeTrackerRobot", WorkTimeTrackerRobot);

	WorkTimeTrackerRobot.$inject = ["WorkTimeTrackerBook", "WorkTimeTrackerBookEntry", "WTTStorageUri", "evalAsync", "$window"];

	function WorkTimeTrackerRobot (WorkTimeTrackerBook, WorkTimeTrackerBookEntry, WTTStorageUri, evalAsync, $window) {

		Robot.prototype.start = startRobot;
		Robot.prototype.stop = stopRobot;
		Robot.prototype.info = function () {
			return {
				status: this.status,
				entry: this.entry
			};
		};

		return new Robot(WorkTimeTrackerBook, new $window.Firebase(WTTStorageUri + "/wtt-robot"));

		function Robot (bookRef, robotRef) {
			Object.defineProperties(this, {
				"status": {
					writable: true,
					value: false
				},
				"entry": {
					writable: true
					// value: {}
				},
				// Ссылки на базу данных
				"bookRef": {
					writable: false,
					value: bookRef
				},
				"robotRef": {
					writable: false,
					value: robotRef,
				},
				"entryRef": {
					writable: true
				}
			});

			// Загружаем начальное состояние робота
			this.robotRef.once("value", evalAsync(function (snapshotOfRobot) {
				if(!snapshotOfRobot.val()) {
					console.warn("Робота убили или первый раз для данного аккаунта загрузили");
					return;
				} else {
					// Статус
					this.status = snapshotOfRobot.val().status;
					// Текущая запись. Если была, загрузим её
					if (snapshotOfRobot.val().entryKey) {
						this.bookRef.child(snapshotOfRobot.val().entryKey).once("value", evalAsync(function (snapshotOfBookEntry) {
							if (!snapshotOfBookEntry.val()) {
								console.log("Robot: удалили запись, которую мы отслеживали.")
								// Либо остановить робота, либо хранить значения в роботе и ниибет
							} else {
								// (Сохраняем значения)
								this.entryRef = snapshotOfBookEntry.ref();
								this.entry = snapshotOfBookEntry.val();
							}
						}.bind(this)));
					}
				}
			}.bind(this)));
		}

		function startRobot (options) {
			// Если были запущены, перезапускаемся..
			if (this.status) { this.stop(); }
			this.status = true;
			this.robotRef.child("status").set(true);
			// Создать новую запись
			this.entry = angular.extend({ start: (new Date()).getTime(), description: $window.funnyPhrase() }, options);
			// Добавить её в хранилище книги
			this.entryRef = this.bookRef.push(this.entry);
			// Сохраняем ссылку на неё в хранилище робота
			this.robotRef.child("entryKey").set(this.entryRef.key());
		}

		function stopRobot (options) {
			// Если мы записывали что-то,
			if (this.status) {
				// ...прописать стоп
				angular.extend(this.entry, { stop: (new Date()).getTime() }, options);
				// и сохранить в хранилище Книги.
				this.entryRef.update(this.entry);
				// Удалить ссылку из хранилища робота
				// this.robotRef.child("entryKey").remove();
			}
			this.status = false;
			this.robotRef.child("status").set(false);
		}
	}

}());
/**
 *	Просто забавные фразы
 */
;(function () {
	"use strict";
	window.funnyPhrase = function (options) {
		var funnyVocabulary = {
			verb: [
				["окучиваем", "окучивать"],
				["долбим", "добить"],
				["ковыряем", "ковырять"],
				["смазываем", "смазывать"],
				["искореняем", "искоренять"],
				["пилим", "пилить"],
				["полируем", "полировать"],
				["штопаем", "штопать"],
				["пилотируем", "пилотировать"]
			],
			noun: [
				["трактор"],
				["дятла"],
				["груши"],
				["пассатижи"],
				["жука"],
				["верстак"],
				["утюг"]
			]
		}
		if(!options) options = ["verb","noun"]; // safe call
		var phrase = "";
		for(var i = 0; i < options.length; i++) {
			var word = funnyVocabulary[options[i]][parseInt(Math.round(Math.random() * (funnyVocabulary[options[i]].length-1)))];
			phrase += word[0] + (i < options.length-1 ? " " : "");
		}
		return phrase;
	}
}());
/**
 *	Отложенный запуск (магия привязки Angular.js)
 */
;(function () {
	"use strict";
	angular.module("Cambatron.utils")
		.factory("evalAsync", function ($rootScope) {
			return function (fn) {
				return function (args) {
					$rootScope.$evalAsync(fn.call(this, args));
				};
			};
		});
}());
/**
 *	Операции над отсортированными массивами с применением двоичных, интерполяционных
 *	и подобных им алгоритмов. Зависит от вспомогательной математики SortedArrayMath
 *	@param {array} data Исходный сортированный массив
 *	@param {object} options Опции создания
 *	@param {function} options.getKey Функция возвращающая значение ключа, по
 *		которому мы сортированы
 *	@param {function} options.direction Направление сортировки
 *	При инициализации мы попытаемся "умно" предположить порядок сортировки,
 *	но пользовательские опции перезапишут наши догадки.
 */
function SortedArray (data, options) {

	this.data = data || [];

	// Проставляем по-умолчанию что ключ это и есть элемент массива (число)
	this.getKey = this.defaultGetKey.bind(this);

	// Возможно элементы более сложные объекты, для этого пользователь предоставил
	// нам функцию получения ключа из элемента
	if (safeCheckObjectChild(options, "getKey")) {
		this.getKey = options.getKey;
	}

	// Если элементы сложнее чем строка или число и нет кастомной функции получения
	// ключа, это фейл от юзера
	if (this.data.length > 1 && typeof this.data[0] != "string" && typeof this.data[0] != "number" && !safeCheckObjectChild(options, "getKey")) {
		var error = new Error ("Объекты сложнее строки и числа, как получить ключ?");
		console.log(error.stack);
		return;
	}

	// Автоопределение порядка сортировки
	if (this.data.length > 1) {
		this.direction = this.getKey(this.data[1]) > this.getKey(this.data[0]) ? 1 : -1;
	}

	// Пользовательская установка порядка сортировки
	if (safeCheckObjectChild(options, "direction")) {
		this.direction = options.direction;
	}

}

/**	Мы должны знать направление своей сортировки.
 *	По умолчанию возрастаем.
 */
SortedArray.prototype.defaultDirection = 1;

/**	По-умолчанию нативное сравнение, работает для ключей в виде чисел и строк
 *	Можно ли придумать некий другой принцип сортировки? Всё может быть )))
 */
SortedArray.prototype.defaultCompareFn = function (iteratingValue, keyValue) {
	return this.getKey(iteratingValue) == this.getKey(keyValue) ? 0 : (this.getKey(iteratingValue) > this.getKey(keyValue) ? 1 : -1);
}

/**	По-умолчанию "ключ" по которому сортирован массив - это элемент массива и есть
 *	(то есть массив чисел или строк мы имеем)
 */
SortedArray.prototype.defaultGetKey = function (value) {
	return value;
}

/**	Найти элемент по ключу - по тому значению, по которому отсортирован массив
 *	@param {number} key Искомое значение
 *	@param {function} compareFn
 *		Пользовательская функция сравнения текущего итема с ключом. См. defaultCompareFn
 *		Если она возвращает 0, значит элемент найден. Если больше 0, то
 *		поиск продолжится в меньших индексах чем индекс текущего итема ("слева"), если
 *		меньше 0, то в бОльших ("справа").
 */
SortedArray.prototype.find = function (value, compareFn) {
	var range = { min: 0, max: this.data.length - 1 },
		compareFn = compareFn || this.defaultCompareFn.bind(this);
	while (range.min <= range.max) {
		var midindex = SortedArrayMath.midpoint(range.min, range.max),
			midvalue = this.data[midindex],
			decision = this.direction * compareFn(midvalue, value);
		if (decision == 0) {
			return { value: midvalue, id: midindex };
		} else if (decision > 0) {
			range.max = midindex - 1; // "Левая" часть массива
		} else if (decision < 0) {
			range.min = midindex + 1; // "Правая" часть массива
		} else {
			// Ругнёмся на плохое сравнение
			var error = new Error("Странная функция сравнения...");
			console.log(error.stack, "возвратила '",decision,"'", "искали", value, "наткнувшись на", midvalue);
			// И выйдем из цикла
			break;
		}
	}
}

/**	Вставить элемент по порядку своего ключа - значению, по которому отсортирован массив
 *	@param {number} key Искомое значение
 *	@param {function} compareFn
 *		Пользовательская функция сравнения текущего итема с ключом. См. defaultCompareFn
 *		Если она возвращает 0, значит элемент найден. Если больше 0, то
 *		поиск продолжится в меньших индексах чем индекс текущего итема ("слева"), если
 *		меньше 0, то в бОльших ("справа").
 */
SortedArray.prototype.insert = function (value, compareFn) {
	var range = { min: 0, max: this.data.length - 1 },
		compareFn = compareFn || this.defaultCompareFn.bind(this);

	//
	// Граничные решения
	//

	// Если пустой массив, сразу вставляем
	if (this.data.length == 0) {
		this.data.push(value);
		return {
			id: 0,
			value: value
		};
	}

	// Может в самое начало сразу?
	if (
		( this.direction > 0
				&& this.getKey(value) < this.getKey(this.data[0]) )
		|| ( this.direction < 0
				&& this.getKey(value) > this.getKey(this.data[0]) )
	) {
		this.data.unshift(value);
		return {
			id: 0,
			value: value
		};
	}
	// Или может в конец самый?
	if (
		( this.direction > 0
				&& this.getKey(value) > this.getKey(this.data[this.data.length-1]) )
		|| ( this.direction < 0
				&& this.getKey(value) < this.getKey(this.data[this.data.length-1]) )
	) {
		this.data.push(value);
		return {
			id: this.data.length - 1,
			value: value
		};
	}

	//
	// Не срослось по-хорошему, срастется по-умному. Магическая фраза
	// "Ищем всегда справа, чтобы вставить слева от найденного" означает
	// некий вариант алгоритма - можно делать наоборот, ни на что не влияет.
	// Просто особеннность проверок.
	//

	while (range.min < range.max) {
		var midindex = SortedArrayMath.midpoint(range.min, range.max),
			midvalue = this.data[midindex],
			decision = this.direction * compareFn(midvalue, value);
		if (decision > 0) {
			// Лезем в "левую" часть массива
			range.max = midindex - 1;
		} else if (decision < 0) {
			// Лезем в "правую" часть массива
			range.min = midindex + 1;
		} else if (decision == 0) {
			// Вылазим совсем из цикла так как нашли вдруг индентичный элемент,
			// что сразу даёт нам нужный индекс. Переходим к логике вставки в конце функции...
			range.min = midindex;
			range.max = midindex;
			break;
		} else {
			// Ругнёмся на плохое сравнение
			var error = new Error("Странная функция сравнения...");
			console.log(error.stack, "возвратила '",decision,"'", "искали", value, "наткнувшись на", midvalue);
			// И выйдем из цикла
			break;
		}
	}

	// Странные ошибки алгоритма
	if (range.min != range.max) {
		var error = new Error("Чет странное в алгоритме случилось, диапазон не схлопнулся");
		console.log(error.stack, "Диапазон от %s до %s", range.min, range.max);
		return;
	}

	// Теперь думаем вставить ли слева или справа
	if (this.getKey(value) <= this.getKey(this.data[range.min])) {
		if (this.direction > 0) {
			indexToInsertTo = range.min
		} else {
			indexToInsertTo = range.min + 1;
		}
	} else {
		if (this.direction > 0) {
			indexToInsertTo = range.min + 1;
		} else {
			indexToInsertTo = range.min
		}
	}

	// Магия успеха
	this.data.splice(indexToInsertTo, 0, value);
	return {
		id: indexToInsertTo,
		value: value
	};

	var indexToInsertTo;
}

/**	Получить элемент по индексу (смолочкомсмёдом имитация "[]")
 *	@param {number} index Если отрицательный, считаем с конца
 */
SortedArray.prototype.get = function (index) {
	if (index < 0) return this.data[this.data.length + index];
	else return this.data[index];
};

/**	Длина массива (смолочкомсмёдом имитация .length) */
SortedArray.prototype.length = function () {
	return this.data.length;
};

/** Получить элемент в серединке диапазона
 * @param {number} min
 * @param {number} max
 */
SortedArray.prototype.getAtMidpoint = function (min, max) {
	return this.data[window.SortedArrayMath.midpoint(min, max)];
}

/** Вспомогательная математика */

window.SortedArrayMath = {
	/**	Найти среднее значение. Округляем в меньшую сторону
	 *	@param {number} min
	 *	@param {number} max
	 */
	midpoint: function (min, max) {
		return Math.floor((min + max) * 0.5);
	}
};

/**	Что-то ещё вспомогательное */

window.safeCheckObjectChild = function (object, child) {
	if (!object) {
		return false;
	} else {
		return object[child];
	}
};

